package code.api.builder.{{classname}}
import java.util.UUID

import code.api.builder.{APIBuilder_Connector, CreateTemplateJson, JsonFactory_APIBuilder}
import code.api.builder.JsonFactory_APIBuilder._
import code.api.util.APIUtil._
import code.api.util.ApiTag._
import code.api.util.ApiVersion
import code.api.util.ErrorMessages._
import net.liftweb.common.Full
import net.liftweb.http.rest.RestHelper
import net.liftweb.json
import net.liftweb.json.Extraction._
import net.liftweb.json._
import net.liftweb.mapper.By
import net.liftweb.util.Helpers.tryo

import scala.collection.immutable.Nil
import scala.collection.mutable.ArrayBuffer
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

trait APIMethods_APIBuilder { self: RestHelper =>
  val ImplementationsBuilderAPI = new Object() {
    val apiVersion: ApiVersion = ApiVersion.apiBuilder
    val resourceDocs = ArrayBuffer[ResourceDoc]()
    val apiRelations = ArrayBuffer[ApiRelation]()
    val codeContext = CodeContext(resourceDocs, apiRelations)
    implicit val formats = net.liftweb.json.DefaultFormats
    val TemplateNotFound = "OBP-31001: Template not found. Please specify a valid value for TEMPLATE_ID."
    def endpointsOfBuilderAPI = {{#operations}}{{#operation}}{{operationId}} ::
                            {{/operation}}{{/operations}}Nil
    {{#operations}}
        {{#operation}}
            {{newline}}
            resourceDocs += ResourceDoc({{operationId}}, apiVersion, "{{operationId}}",
            "{{httpMethod}}", "{{{vendorExtensions.x-obp-path}}}", "{{{summary}}}",
            "{{{unescapedDescription}}}", emptyObjectJson, templatesJson,
            List(UserNotLoggedIn, UnknownError), Catalogs(notCore, notPSD2, notOBWG), apiTagApiBuilder :: Nil)

            lazy val {{operationId}} : OBPEndpoint = {
                  //get private accounts for one bank
                  case "funds-confirmations" :: Nil JsonPost _ => {
                    cc =>
                      for {
                        (Full(u), callContext) <- authorizeEndpoint(NotImplemented, cc)
                        } yield {
                        (emptyObjectJson, callContext)
                      }
                  }
                }
        {{/operation}}
    {{/operations}}

  }
}



