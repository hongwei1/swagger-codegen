package code.api.builder.{{classname}}
import java.util.UUID

import code.api.berlin.group.v1_3.JvalueString
import code.api.builder.{APIBuilder_Connector, CreateTemplateJson, JsonFactory_APIBuilder}
import code.api.builder.JsonFactory_APIBuilder._
import code.api.util.APIUtil._
import code.api.util.ApiTag._
import code.api.util.ApiVersion
import code.api.util.ErrorMessages._
import net.liftweb.common.Full
import net.liftweb.http.rest.RestHelper
import net.liftweb.json
import net.liftweb.json.Extraction._
import net.liftweb.json._
import net.liftweb.mapper.By
import net.liftweb.util.Helpers.tryo

import scala.collection.immutable.Nil
import scala.collection.mutable.ArrayBuffer
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

trait APIMethods_{{classname}} { self: RestHelper =>
  val Implementations{{classname}} = new Object() {
    val apiVersion: ApiVersion = ApiVersion.berlinGroupV1_3
    val resourceDocs = ArrayBuffer[ResourceDoc]()
    val apiRelations = ArrayBuffer[ApiRelation]()
    val codeContext = CodeContext(resourceDocs, apiRelations)
    implicit val formats = net.liftweb.json.DefaultFormats
    protected implicit def JvalueToSuper(in: JValue): JvalueString = JvalueString(in)

    val endpoints =
      {{#operations}}{{#operation}}{{operationId}} ::
      {{/operation}}{{/operations}}Nil

    {{#operations}}
        {{#operation}}
            {{newline}}
     resourceDocs += ResourceDoc(
       {{operationId}}, 
       apiVersion, 
       "{{operationId}}",
       "{{httpMethod}}", 
       "{{{vendorExtensions.x-obp-path}}}", 
       "{{{summary}}}",
       "{{{unescapedDescription}}}", 
       JvalueToSuper(json.parse("""{{{vendorExtensions.obp-requestBody}}}""")),
       """{{{vendorExtensions.obp-responseBody}}}""",
       List(UserNotLoggedIn, UnknownError),
       Catalogs(notCore, notPSD2, notOBWG), 
       {{classname}} :: Nil
     )

     lazy val {{operationId}} : OBPEndpoint = {
       case {{{vendorExtensions.endpointPath}}} {{vendorExtensions.jsonMethod}} _ => {
         cc =>
           for {
             (Full(u), callContext) <- authorizeEndpoint(UserNotLoggedIn, cc)
             } yield {
             (NotImplemented, callContext)
           }
         }
       }
        {{/operation}}
    {{/operations}}

  }
}



